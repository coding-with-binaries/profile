{"version":3,"sources":["components/header/index.js","components/header/Header.jsx","components/nav/index.js","components/nav/Nav.jsx","theme.js","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","Box","className","gridArea","direction","background","align","justify","Text","weight","color","size","margin","Clock","type","Nav","elevation","Image","src","theme","global","font","family","height","primaryText","App","Grommet","full","Grid","rows","columns","areas","name","start","end","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTACeA,G,MCGA,WACb,OACE,kBAACC,EAAA,EAAD,CACEC,UAAU,aACVC,SAAS,SACTC,UAAU,MACVC,WAAW,8DACXC,MAAM,SACNC,QAAQ,WAER,kBAACN,EAAA,EAAD,CAAKG,UAAU,MAAME,MAAM,UACzB,kBAACE,EAAA,EAAD,CAAMC,OAAO,OAAOC,MAAM,SAA1B,wBAGA,kBAACF,EAAA,EAAD,CAAMG,KAAK,QAAQC,OAAO,QAAQF,MAAM,SAAxC,sBAIF,kBAACG,EAAA,EAAD,CAAOX,UAAU,mBAAmBY,KAAK,UAAUH,KAAK,a,QCrB/CI,G,MCGA,WACb,OACE,kBAACd,EAAA,EAAD,CACEC,UAAU,UACVG,WAAW,8DACXF,SAAS,MACTG,MAAM,UAEN,kBAACL,EAAA,EAAD,CACEC,UAAU,8BACVc,UAAU,QACVV,MAAM,SACNC,QAAQ,UAER,kBAACU,EAAA,EAAD,CAAOf,UAAU,sBAAsBgB,IAAI,2BClBtCC,EAAQ,CACnBC,OAAQ,CACNC,KAAM,CACJC,OAAQ,YACRX,KAAM,OACNY,OAAQ,QAEVb,MAAO,CACLc,YAAa,aCoBJC,MArBf,WACE,OACE,kBAACC,EAAA,EAAD,CAASxB,UAAU,gBAAgBiB,MAAOA,EAAOQ,MAAI,GACnD,kBAACC,EAAA,EAAD,CACEC,KAAM,CAAC,OAAQ,QACfC,QAAS,CAAC,QAAS,QACnBC,MAAO,CACL,CAAEC,KAAM,SAAUC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC1C,CAAEF,KAAM,MAAOC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACvC,CAAEF,KAAM,OAAQC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,KAE1CC,MAAO,CAAEZ,OAAQ,SAEjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACtB,EAAA,EAAD,CAAKE,SAAS,Y,MCVFiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1b5eff78.chunk.js","sourcesContent":["import Header from './Header';\nexport default Header;\n","import { Box, Clock, Text } from 'grommet';\nimport React from 'react';\nimport './Header.css';\n\nexport default function() {\n  return (\n    <Box\n      className=\"app-header\"\n      gridArea=\"header\"\n      direction=\"row\"\n      background=\"linear-gradient(102.77deg, #865ED6 -9.18%, #18BAB9 209.09%)\"\n      align=\"center\"\n      justify=\"between\"\n    >\n      <Box direction=\"row\" align=\"center\">\n        <Text weight=\"bold\" color=\"white\">\n          coding-with-binaries\n        </Text>\n        <Text size=\"small\" margin=\"small\" color=\"white\">\n          (By Varun Sharma)\n        </Text>\n      </Box>\n      <Clock className=\"app-header-clock\" type=\"digital\" size=\"small\" />\n    </Box>\n  );\n}\n","import Nav from './Nav';\nexport default Nav;\n","import { Box, Image } from 'grommet';\nimport React from 'react';\nimport './Nav.css';\n\nexport default function() {\n  return (\n    <Box\n      className=\"app-nav\"\n      background=\"linear-gradient(162.77deg, #865ED6 -9.18%, #18BAB9 209.09%)\"\n      gridArea=\"nav\"\n      align=\"center\"\n    >\n      <Box\n        className=\"app-nav-profile-pic-wrapper\"\n        elevation=\"large\"\n        align=\"center\"\n        justify=\"center\"\n      >\n        <Image className=\"app-nav-profile-pic\" src=\"images/profile.jpg\"></Image>\n      </Box>\n    </Box>\n  );\n}\n","export const theme = {\n  global: {\n    font: {\n      family: 'Quicksand',\n      size: '18px',\n      height: '20px'\n    },\n    color: {\n      primaryText: '#3c61a5'\n    }\n  }\n};\n","import { Box, Grid, Grommet } from 'grommet';\nimport React from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Nav from './components/nav';\nimport { theme } from './theme';\n\nfunction App() {\n  return (\n    <Grommet className=\"app-container\" theme={theme} full>\n      <Grid\n        rows={['72px', 'flex']}\n        columns={['small', 'auto']}\n        areas={[\n          { name: 'header', start: [0, 0], end: [1, 0] },\n          { name: 'nav', start: [0, 1], end: [0, 1] },\n          { name: 'main', start: [1, 1], end: [1, 1] }\n        ]}\n        style={{ height: '100%' }}\n      >\n        <Header />\n        <Nav />\n        <Box gridArea=\"main\" />\n      </Grid>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}